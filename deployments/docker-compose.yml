# make rebuild
# 
# docker-compose exec  mongodb bash     <-- running mongodb cli
# docker-compose run --rm  go-cli       <-- running checker ./ping

version: '3'

services:
    go-server:
        container_name: ${SERVER_NAME}
        build:
            context: ../
            dockerfile: ./deployments/go/server/Dockerfile
        ports:
            - "${WEB_EXP_PORT}:${WEB_PORT}"
        restart: on-failure
        volumes:
            - ../log:/root/log
        env_file:
            - .env
    go-cli:
        container_name: ${CLI_NAME}
        build:
            context: ../
            dockerfile: ./deployments/go/ping/Dockerfile
        volumes:
            - ../log:/root/log
        env_file:
            - .env
    mongodb:
        container_name: ${MONGODB_NAME}
        image: mongo:3.6
        restart: on-failure
        volumes:
            - ../data/mongodb:/data/db
        ports:
            - "${MONGODB_EXT_PORT}:${MONGODB_PORT}"
        command: "--storageEngine wiredTiger --setParameter failIndexKeyTooLong=false"
networks:
    default:
        driver: bridge

# ENV Settings::
# https://github.com/docker/compose/issues/4223

# env_file
# This file (or files) contains a list of docker environment variables which will be passed to the container as if they 
# were in the environment: block. These files are explicitly defined in the env_file: config block. Anything in these 
# files is passed as if it were via docker run --env-file=FILE.

# .env file (https://docs.docker.com/compose/env-file/)
# This file must be placed in the same directory where docker-compose is run from, and is automatically loaded by 
# docker-compose. It contains a list of environment variables which you would like to use as variable substitutions 
# (aka string replacement) within your docker-compose.yml. These vars are not passed to the docker container. 